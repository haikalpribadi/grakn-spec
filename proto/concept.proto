syntax = "proto3";

package ai.grakn.rpc.generated;
option java_outer_classname = "GrpcConcept";

message Concept {
    ConceptId id = 1;
    BaseType baseType = 2;
}

message ConceptId {
    string value = 1;
}

enum BaseType {
    Entity = 0;
    Relationship = 1;
    Attribute = 2;
    EntityType = 3;
    RelationshipType = 4;
    AttributeType = 5;
    Role = 6;
    Rule = 7;
    MetaType = 8; // This represents the top-level meta type only
}

message ConceptMethod {
    oneof conceptMethod {
        // The types here are the arguments for the methods. Most are `Unit`, which indicates no arguments.
        // The return types of these methods are described in `ConceptResponse`.

        // Concept
        Unit delete = 16;

        // Schema concept
        Unit getLabel = 3;
        Label setLabel = 18;
        Unit isImplicit = 4;
        Unit getSubConcepts = 19;
        Unit getDirectSuperConcept = 14;
        Concept setDirectSuperConcept = 17;

        // Rule
        Unit getWhen = 7;
        Unit getThen = 8;

        // Role
        Unit getRelationshipTypesThatRelateRole = 20;
        Unit getTypesThatPlayRole = 21;

        // Type
        Unit getInstances = 30;
        Unit getAttributeTypes = 11;
        Concept setAttributeType = 25;
        Concept unsetAttributeType = 26;
        Unit getKeyTypes = 12;
        Concept setKeyType = 27;
        Concept unsetKeyType = 28;
        Unit isAbstract = 6;
        bool setAbstract = 22;
        Unit getRolesPlayedByType = 29;
        Concept setRolePlayedByType = 23;
        Concept usetRolePlayedByType = 24;

        // Entity type
        Unit addEntity = 34;

        // Relationship type
        Unit getRelatedRoles = 36;
        Concept setRelatedRole = 37;
        Concept usnetRelatedRole = 38;

        // Attribute type
        AttributeValue putAttribute = 32;
        AttributeValue getAttribute = 33;
        Unit getDataType = 2;
        Unit getRegex = 9;
        Regex setRegex = 31;

        // Thing
        Unit isInferred = 5;
        Unit getDirectType = 13;
        Unit getRelationships = 39;
        Concepts getRelationshipsByRoles = 48;
        Unit getRolesPlayedByThing = 40;
        Unit getAttributes = 41;
        Concepts getAttributesByTypes = 49;
        Unit getKeys = 42;
        Concepts getKeysByTypes = 50;
        Concept setAttribute = 43;
        Concept unsetAttribute = 44;

        // Relationship
        Unit addRelationship = 35;
        Unit getRolePlayers = 10;
        Concepts getRolePlayersByRoles = 51;
        RolePlayer setRolePlayer = 46;
        RolePlayer unsetRolePlayer = 15;

        // Attribute
        Unit getValue = 1;
        Unit getOwners = 47;
    }
}

// Represents a message with no information
message Unit {}

message ConceptResponse {
    oneof value {
        AttributeValue attributeValue = 1;
        DataType dataType = 2;
        Label label = 3;
        bool bool = 4;
        Pattern pattern = 5;
        string string = 6;
        RolePlayers rolePlayers = 7;
        // TODO: make these properties streamable
        Concepts concepts = 8;
        Concept concept = 9;
        Unit unit = 10;
        Regex regex = 11;
    }
}

message AttributeValue {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int32 integer = 3;
        int64 long = 4;
        float float = 5;
        double double = 6;
        int64 date = 7; // time since epoch in milliseconds
    }
}

enum DataType {
    String = 0;
    Boolean = 1;
    Integer = 2;
    Long = 3;
    Float = 4;
    Double = 5;
    Date = 6;
}

message Label {
    string value = 1;
}

message Pattern {
    string value = 1;
}

message RolePlayers {
    repeated RolePlayer rolePlayer = 1;
}

message RolePlayer {
    Concept role = 1;
    Concept player = 2;
}

message Concepts {
    repeated Concept concept = 1;
}

message Regex {
    string value = 1;
}
